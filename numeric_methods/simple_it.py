import os
import numpy as np

def get_data() -> np.ndarray:
    '''
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π.
    
    Returns:
        np.ndarray: –ú–∞—Å—Å–∏–≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–ª–µ–Ω–æ–≤.
    '''
    n = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö --> '))  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    os.system('cls')  # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Å–æ–ª—å
    print(f'‚úÖ –í—ã –≤–≤–µ–ª–∏ {n}\n')  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    array = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π
    for i in range(n):
        while True:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
            string = input(f'‚ñ∂ –í–≤–µ–¥–∏—Ç–µ {n + 1} —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è {i + 1}-–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è --> ')
            tmp = list(map(float, string.split()))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
            if len(tmp) == (n + 1):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª
                print('‚úÖ –û—Ç–ª–∏—á–Ω–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–ª–æ')
                array.append(tmp)  # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
                break
            else:
                print(f'‚ùå –û—à–∏–±–∫–∞: –í—ã –≤–≤–µ–ª–∏ {len(tmp)}, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è {n + 1}')  # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ

    num_arr = np.array(array, dtype=float)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ –º–∞—Å—Å–∏–≤ NumPy
    return num_arr

def iterable_form(arr: np.ndarray):
    '''
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º—É, —É–¥–æ–±–Ω—É—é –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.
    
    Args:
        arr (np.ndarray): –í—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–ª–µ–Ω–æ–≤.
    
    Returns:
        tuple: –ú–∞—Ç—Ä–∏—Ü–∞ C, –≤–µ–∫—Ç–æ—Ä d –∏ –Ω–æ—Ä–º–∞ –º–∞—Ç—Ä–∏—Ü—ã C.
    '''
    n = arr.shape[0]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–π
    A = arr[:, :-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    b = arr[:, -1]   # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–ª–µ–Ω–æ–≤
    C = np.zeros_like(A, dtype=float)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É C
    d = np.zeros_like(b, dtype=float)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä d

    for i in range(n):
        if A[i, i] == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω—É–ª–µ–≤—ã–º
            raise ValueError("–ù—É–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏, –º–µ—Ç–æ–¥ –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º!")
        
        d[i] = b[i] / A[i, i]  # –í—ã—á–∏—Å–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ–∫—Ç–æ—Ä–∞ d
        for j in range(n):
            if i != j:
                C[i, j] = -A[i, j] / A[i, i]  # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É C

    norm_C = np.linalg.norm(C, ord=np.inf)  # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ—Ä–º—É –º–∞—Ç—Ä–∏—Ü—ã C
    print(f'üîç –ù–æ—Ä–º–∞ –º–∞—Ç—Ä–∏—Ü—ã C: {norm_C}')
    
    if norm_C >= 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        print('‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–π—Ç–∏—Å—å, —Ç–∞–∫ –∫–∞–∫ –Ω–æ—Ä–º–∞ C >= 1')
    
    return C, d, norm_C  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É C, –≤–µ–∫—Ç–æ—Ä d –∏ –Ω–æ—Ä–º—É

def simple_iteration(C: np.ndarray, d: np.ndarray, norm_C: float, eps=1e-6, max_iter=1000):
    '''
    –†–µ—à–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –∞–ø—Ä–∏–æ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏.
    
    Args:
        C (np.ndarray): –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.
        d (np.ndarray): –í–µ–∫—Ç–æ—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–ª–µ–Ω–æ–≤.
        norm_C (float): –ù–æ—Ä–º–∞ –º–∞—Ç—Ä–∏—Ü—ã C.
        eps (float): –¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è.
        max_iter (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π.
    
    Returns:
        np.ndarray: –†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π.
    '''
    n = len(d)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    x = d.copy()  # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ x(0) = d

    for iteration in range(max_iter):
        x_new = np.dot(C, x) + d  # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        error = np.linalg.norm(x_new - x, ord=np.inf)  # –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É

        if error < eps:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
            print(f'‚úÖ –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {iteration + 1} –∏—Ç–µ—Ä–∞—Ü–∏–π')
            return x_new
        
        # –ê–ø—Ä–∏–æ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—à–∏–±–∫–∏
        if norm_C < 1:
            apriori_error = (norm_C / (1 - norm_C)) * error
            print(f'üîπ –ê–ø—Ä–∏–æ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—à–∏–±–∫–∏ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}: {apriori_error}')
        
        x = x_new  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ

    print('‚ö† –ú–µ—Ç–æ–¥ –Ω–µ —Å–æ—à–µ–ª—Å—è –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π')
    return x  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ

def solving_equation():
    '''–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π.'''
    arr = get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    C, d, norm_C = iterable_form(arr)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    solution = simple_iteration(C, d, norm_C)  # –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π
    print('\nüîπ –†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: ', solution)  # –í—ã–≤–æ–¥–∏–º —Ä–µ—à–µ–Ω–∏–µ

def main():
    '''–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É.'''
    solving_equation()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π

if __name__ == '__main__':
    main()  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é